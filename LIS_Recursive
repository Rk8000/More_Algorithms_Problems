import java.util.Scanner;

/**
 * Created by ravikumarsingh on 3/14/15.
 */
public class LongestIncreasingSubseqRecursive {
    static int final_max =1;
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);
        int numberOfNumbers = sc.nextInt(); // which element to find
        sc.nextLine();
        String[] array = sc.nextLine().split(" ");
        // declaring the variables
        int[] inputArray = new int[numberOfNumbers];

        // initializing the variables
        for (int i = 0; i < array.length; i++) {
            inputArray[i] = Integer.parseInt(array[i]);
        }
        // finding the longestIncreasingSubseq
        longestIncreasingSubsequenseRec(numberOfNumbers, inputArray);
        System.out.println(final_max);
    }

    private static int longestIncreasingSubsequenseRec(int numberOfNumbers, int[] inputArray) {
        // base case
        if( numberOfNumbers ==1){
            return 1;
        }

        int maxTillHere;
        int max =1;  // length of longest Increasing Subs ending with inputArray[n-1]
        // Recursively get all longest Increasing Subs ending with inputArray[0], inputArray[1].... inputArray[n-2]
        for ( int i =1 ; i <numberOfNumbers ;i++){
            maxTillHere = longestIncreasingSubsequenseRec(i, inputArray);
            if( inputArray[i-1] < inputArray[numberOfNumbers-1] && maxTillHere +1 > max){
                max = maxTillHere +1;
            }
        }

        // Check if the final_max needs to be updated
        if( final_max < max){
            final_max = max;
        }
        //return longest Increasing Subs ending with inputArray[n-1]
        return  max;
    }

}
